package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER, IGUAL_IGUAL, DIFERENTE, MAYOR, MENOR, MENOR_IGUAL, MAYOR_IGUAL, AND, OR, NOT;
nonterminal NodoC3D inicial, expresion, relacional, logico;
nonterminal String signo_relacional;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} logico:log 
                    {: 
                        RESULT = log;
                        ControlC3D.agregarC3D("//Ãšltimo valor: " + log.getCad());
                    :};

logico  ::= logico:izq OR logico:der
				{:
					String temp = ControlC3D.generaTemp();
					String c3d = temp + " = " + izq.getCad() + " || " + der.getCad() + ";\n";
					ControlC3D.agregarC3D(c3d);
					RESULT = new NodoC3D(temp); 
				:}
		| logico:izq AND logico:der
				{:
					String temp = ControlC3D.generaTemp();
					String c3d = temp + " = " + izq.getCad() + " && " + der.getCad() + ";\n";
					ControlC3D.agregarC3D(c3d);
					RESULT = new NodoC3D(temp); 
				:}
		| NOT logico:log
				{:
					String temp = ControlC3D.generaTemp();
					String c3d = temp + " = ! " + log.getCad() + ";\n";
					ControlC3D.agregarC3D(c3d);
					RESULT = new NodoC3D(temp); 
				:}		
		| expresion:izq signo_relacional:rel expresion:der
				{:
					String temp = ControlC3D.generaTemp();
					String c3d = temp + " = " + izq.getCad() + rel + der.getCad() + ";\n";
					ControlC3D.agregarC3D(c3d);
					RESULT = new NodoC3D(temp); 
				:};

signo_relacional ::= IGUAL_IGUAL
					{:
						RESULT = " == ";
					:}
					| DIFERENTE
					{:
						RESULT = " != ";
					:}
					| MAYOR
					{:
						RESULT = " > ";
					:}
					| MENOR
					{:
						RESULT = " < ";
					:}
					| MAYOR_IGUAL
					{:
						RESULT = " >= ";
					:}
					| MENOR_IGUAL
					{:
						RESULT = " <= ";
					:};

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ logico:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;